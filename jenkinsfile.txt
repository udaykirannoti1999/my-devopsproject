pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-1'
        AWS_ACCOUNT_ID = '703671913075'
        GIT_REPO = 'https://github.com/udaykirannoti1999/my-devopsproject.git'
        ECR_REPO = ''
        IMAGE_TAG = ''
        BRANCH_NAME = ''
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Remove existing workspace
                    sh "rm -rf workspace || true"
                    
                    // Clone the repository into workspace
                    sh "git clone ${GIT_REPO} workspace"

                    dir('workspace') {
                        // Fetch all branches to ensure we have all refs
                        sh "git fetch --all"
                        
                        // Get the current branch name
                        env.BRANCH_NAME = sh(script: "git symbolic-ref --short HEAD || git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()

                        // Check if the branch name was determined successfully
                        if (!env.BRANCH_NAME?.trim()) {
                            error "Failed to determine branch name!"
                        }
                        
                        echo "Current Git Branch: ${env.BRANCH_NAME}"
                    }
                }
            }
        }

        stage('Determine ECR Repository') {
            steps {
                script {
                    // Determine the ECR repository based on the branch name
                    if (env.BRANCH_NAME == 'Dev-branch') {
                        env.ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/myapp-dev"
                    } else if (env.BRANCH_NAME == 'Preprod') {
                        env.ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/myapp-preprod"
                    } else if (env.BRANCH_NAME == 'main') {
                        env.ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/myapp-prod"
                    } else {
                        error "Branch ${env.BRANCH_NAME} is not configured for deployment."
                    }
                    echo "Target ECR Repository: ${env.ECR_REPO}"
                }
            }
        }

        stage('Ensure ECR Repository Exists') {
            steps {
                script {
                    // Check if the ECR repository is set correctly
                    if (!env.ECR_REPO?.trim()) {
                        error "ECR_REPO is not set! Ensure the Determine ECR Repository stage runs correctly."
                    }
                    def repoName = env.ECR_REPO.split('/')[-1] // Extract repository name from ECR URL
                    // Ensure the ECR repository exists
                    sh """
                    aws ecr describe-repositories --repository-names ${repoName} --region ${AWS_REGION} || \
                    aws ecr create-repository --repository-name ${repoName} --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Set the image tag based on the branch name and build number
                    env.IMAGE_TAG = "${env.BRANCH_NAME}-${BUILD_NUMBER}"
                    dir('workspace') {
                        // Build the Docker image
                        sh "docker build -t ${env.ECR_REPO}:${env.IMAGE_TAG} ."
                        // Tag the image as latest
                        sh "docker tag ${env.ECR_REPO}:${env.IMAGE_TAG} ${env.ECR_REPO}:latest"
                    }
                }
            }
        }

        stage('Authenticate with AWS ECR') {
            steps {
                script {
                    // Login to AWS ECR
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${env.ECR_REPO}"
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                script {
                    // Push the Docker image to ECR
                    echo "Pushing Docker image: ${env.ECR_REPO}:${env.IMAGE_TAG}"
                    sh "docker push ${env.ECR_REPO}:${env.IMAGE_TAG}"
                    sh "docker push ${env.ECR_REPO}:latest"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // Remove the built images and the workspace
                    sh "docker rmi ${env.ECR_REPO}:${env.IMAGE_TAG} || true"
                    sh "docker rmi ${env.ECR_REPO}:latest || true"
                    sh "rm -rf workspace"
                }
            }
        }
    }
}
