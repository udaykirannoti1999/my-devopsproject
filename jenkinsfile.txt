pipeline {
    agent any

    environment {
        REGION = 'ap-south-1'  // Replace with your AWS region
        ECR_REPO = '703671913075.dkr.ecr.ap-south-1.amazonaws.com'  // Single ECR repository for all environments
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Login to AWS ECR') {
            steps {
                script {
                    sh '''
                    aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t myapp:${env.BRANCH_NAME} .'
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    def tag = ''
                    
                    // Set the tag based on the branch name
                    if (env.BRANCH_NAME == 'dev') {
                        tag = 'dev'
                    } else if (env.BRANCH_NAME == 'preprod') {
                        tag = 'preprod'
                    } else if (env.BRANCH_NAME == 'prod') {
                        tag = 'prod'
                    } else {
                        error "Unknown branch: ${env.BRANCH_NAME}. Cannot push Docker image."
                    }
                    
                    // Tag and push the Docker image to the ECR repository with the appropriate tag
                    sh """
                    docker tag myapp:${env.BRANCH_NAME} $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO:$tag
                    docker push $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO:$tag
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images
            sh 'docker rmi myapp:${env.BRANCH_NAME}'
        }
    }
}
