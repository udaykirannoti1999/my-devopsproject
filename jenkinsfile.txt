pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-1'
        AWS_ACCOUNT_ID = '703671913075'
        GIT_REPO = 'https://github.com/udaykirannoti1999/my-devopsproject.git'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    cleanWs() // Cleans up the workspace before starting
                    sh "git clone ${GIT_REPO} ."
                    BRANCH_NAME = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "Current Git Branch: ${BRANCH_NAME}"
                }
            }
        }

        stage('Determine ECR Repository') {
            steps {
                script {
                    def ecrMap = [
                        'Dev-branch': 'myapp-dev',
                        'Preprod': 'myapp-preprod',
                        'main': 'myapp-prod'
                    ]
                    
                    if (!ecrMap.containsKey(BRANCH_NAME)) {
                        error "Branch ${BRANCH_NAME} is not configured for deployment."
                    }
                    
                    ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ecrMap[BRANCH_NAME]}"
                    IMAGE_TAG = "${BRANCH_NAME}-${BUILD_NUMBER}"
                    
                    echo "Target ECR Repository: ${ECR_REPO}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${ECR_REPO}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Authenticate with AWS ECR') {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                script {
                    sh "docker push ${ECR_REPO}:${IMAGE_TAG}"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    sh "docker rmi ${ECR_REPO}:${IMAGE_TAG} || true"
                    cleanWs() // Ensures complete cleanup of workspace
                }
            }
        }
    }
}
